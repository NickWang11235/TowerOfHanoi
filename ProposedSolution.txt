Proposed solution: 
   
    1. The recursive call of the base case will occur more and more frequently in higher disc counts. 
    After analyzing the solution through hand tracing, it seems that the frequency of the call of base case increase 
    exponentially according to function 2^x. This suggests that the method must recursivelly call upon itself twice 
    in each iteration of the method. 
    
    2. The destination of the moving of the disc changes, this leads me to suggest that the 3 stacks start, mid and end
    may be stored in an arraylist to be cycled through using a "circular" linkedlist to change the destination of the next
    move.

    3. A counter object may be needed to be used as the ending condition of the recursion calls.

PS Send me your email or something. Put a txt on github.

email:
  Derick Tseng (derickboss1@gmail.com)

A counter should not be used in a recursive function.  It should terminate when it reaches the end condition.  Therefore, I created a method solved() that returns true if it is complete and false otherwise.  This should prove a better alternative.

The recursive call does happen more and more frequently.  However, since the call is to the same thing anyway, we only need to update what we call the sticks and perform the functions accordingly. (i.e. we change the starting stick to the one that the last disk was placed)

this is where aliasing can come in handy.  We set the new stick to the alias so that none of the old ones, besides the name, changes.
